"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[745],{7964:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"React-Native/triggering_experiments","title":"Triggering Experiments in React Native","description":"Triggering Experiments","source":"@site/docs/React-Native/triggering_experiments.md","sourceDirName":"React-Native","slug":"/React-Native/triggering_experiments","permalink":"/docs/React-Native/triggering_experiments","draft":false,"unlisted":false,"editUrl":"https://github.com/pipeguru/documentation/tree/main/docs/React-Native/triggering_experiments.md","tags":[{"inline":true,"label":"react-native","permalink":"/docs/tags/react-native"},{"inline":true,"label":"experiments","permalink":"/docs/tags/experiments"}],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Triggering Experiments in React Native","tags":["react-native","experiments"],"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"React Native Installation Guide","permalink":"/docs/React-Native/installation"},"next":{"title":"Consuming SDK Events","permalink":"/docs/React-Native/consuming_events"}}');var i=t(4848),s=t(8453);const o={title:"Triggering Experiments in React Native",tags:["react-native","experiments"],sidebar_position:2},a=void 0,l={},c=[{value:"Triggering Experiments",id:"triggering-experiments",level:2},{value:"The <code>usePipeguruTriggers</code> Hook",id:"the-usepipegurutriggers-hook",level:3},{value:"1. Displaying Overlays (Popups, Modals)",id:"1-displaying-overlays-popups-modals",level:3},{value:"2. Displaying Inline Content (Banners, Cards)",id:"2-displaying-inline-content-banners-cards",level:3},{value:"3. Using Button Triggers",id:"3-using-button-triggers",level:3},{value:"Putting It All Together",id:"putting-it-all-together",level:3}];function p(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"triggering-experiments",children:"Triggering Experiments"}),"\n",(0,i.jsx)(n.p,{children:"The PipeGuru React Native SDK offers a flexible, hook-based approach to instrumenting your app for experiments. By adding a single hook to your screens, you can empower your marketing and product teams to remotely configure and launch multiple types of placements\u2014popups, inline banners, and button-driven flows\u2014without needing new app releases."}),"\n",(0,i.jsxs)(n.p,{children:["The core of this system is the ",(0,i.jsx)(n.code,{children:"usePipeguruTriggers"})," hook. You provide it with a unique ",(0,i.jsx)(n.code,{children:"screenId"})," for the screen you're instrumenting, and it returns components that will automatically render placements configured for that ",(0,i.jsx)(n.code,{children:"screenId"})," in the PipeGuru dashboard."]}),"\n",(0,i.jsxs)(n.h3,{id:"the-usepipegurutriggers-hook",children:["The ",(0,i.jsx)(n.code,{children:"usePipeguruTriggers"})," Hook"]}),"\n",(0,i.jsxs)(n.p,{children:["First, import the hook and call it in your component. You must provide a unique ",(0,i.jsx)(n.code,{children:"screenId"})," and can optionally pass an ",(0,i.jsx)(n.code,{children:"attributes"})," object for server-side targeting."]}),"\n",(0,i.jsx)(n.p,{children:'These attributes allow your non-technical teams to create powerful segments from the PipeGuru dashboard, like showing an experiment only to "female users in Berlin" or "users on a premium plan".'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { usePipeguruTriggers } from '@pipeguru/react-native';\n\nconst HomeScreen = () => {\n  // Example attributes for segmentation.\n  // 'braze_segments' is shown here as an example of passing custom data structures.\n  const brazeSegments = ['segment1', 'segment2'];\n\n  const { OverlayPlacement, InlinePlacement, TriggerButton } = usePipeguruTriggers(\n    'home',\n    {\n      attributes: {\n        plan: 'premium',\n        user_level: 'power_user',\n        gender: 'female',\n        city: 'Berlin',\n        country: 'Germany',\n        braze_segments: brazeSegments,\n      },\n    }\n  );\n\n  // ... render the components\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"The hook returns three components, each corresponding to a different type of placement."}),"\n",(0,i.jsx)(n.h3,{id:"1-displaying-overlays-popups-modals",children:"1. Displaying Overlays (Popups, Modals)"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"<OverlayPlacement />"})," component is used to display experiments that appear on top of your UI, such as welcome popups, promotional modals, or full-screen takeovers. Simply render it at the top level of your screen component. It handles its own logic for when to appear based on the remote configuration."]}),"\n",(0,i.jsx)(n.p,{children:"This is ideal for:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'On-mount triggers (e.g., "Show a welcome message 2 seconds after the user opens the home screen").'}),"\n",(0,i.jsx)(n.li,{children:"User-segment-based offers."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { usePipeguruTriggers } from '@pipeguru/react-native';\n\nconst HomeScreen = () => {\n  const { OverlayPlacement } = usePipeguruTriggers('home');\n\n  return (\n    <View style={{ flex: 1 }}>\n      {/* This component will automatically handle showing popups */}\n      <OverlayPlacement />\n      <Text>Your screen content</Text>\n    </View>\n  );\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-displaying-inline-content-banners-cards",children:"2. Displaying Inline Content (Banners, Cards)"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"<InlinePlacement />"})," component renders content directly within your screen's layout. It's perfect for embedding promotional banners, feature announcements, or personalized cards that feel like a native part of the UI."]}),"\n",(0,i.jsx)(n.p,{children:"Place the component wherever you want the inline content to appear. Its size and content are controlled from the dashboard."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import React from 'react';\nimport { View, Text, ScrollView } from 'react-native';\nimport { usePipeguruTriggers } from '@pipeguru/react-native';\n\nconst FeedScreen = () => {\n  const { InlinePlacement } = usePipeguruTriggers('feed');\n\n  return (\n    <ScrollView>\n      <Text>Content above the banner</Text>\n      \n      {/* Renders a promotional banner if one is configured */}\n      <InlinePlacement />\n      \n      <Text>Content below the banner</Text>\n    </ScrollView>\n  );\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-using-button-triggers",children:"3. Using Button Triggers"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"<TriggerButton />"})," component renders a remotely-configurable button. Your marketing team can control the button's appearance, text, and what experiment it launches when pressed. If no button is configured for the ",(0,i.jsx)(n.code,{children:"screenId"})," in the dashboard, it will render nothing."]}),"\n",(0,i.jsx)(n.p,{children:'This is useful for user-initiated flows, like "Show me a demo" or "Claim my offer".'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { usePipeguruTriggers } from '@pipeguru/react-native';\n\nconst SettingsScreen = () => {\n  const { TriggerButton } = usePipeguruTriggers('settings');\n\n  return (\n    <View style={{ flex: 1 }}>\n      <Text>App Settings</Text>\n      \n      {/* Renders a button that might launch a \"Rate the App\" flow */}\n      <TriggerButton />\n    </View>\n  );\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"putting-it-all-together",children:"Putting It All Together"}),"\n",(0,i.jsx)(n.p,{children:"By instrumenting a screen once, you open up multiple opportunities for experiments that can be run independently from the dashboard."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import React from 'react';\nimport { View, Text, ScrollView } from 'react-native';\nimport { usePipeguruTriggers } from '@pipeguru/react-native';\n\nconst HomeScreen = () => {\n  // Instrument the screen with a unique ID\n  const { OverlayPlacement, InlinePlacement, TriggerButton } = usePipeguruTriggers(\n    'home',\n    {\n      attributes: {\n        plan: 'premium',\n        user_level: 'power_user',\n        gender: 'female',\n        city: 'Berlin',\n        country: 'Germany',\n        braze_segments: ['segment1', 'segment2'],\n      },\n    }\n  );\n\n  return (\n    <View style={{ flex: 1 }}>\n      {/* Handles popups and full-screen takeovers */}\n      <OverlayPlacement />\n\n      <ScrollView>\n        <Text>Welcome to our app!</Text>\n        \n        {/* Renders an inline promotional banner */}\n        <InlinePlacement />\n        \n        <Text>More content here...</Text>\n      </ScrollView>\n      \n      {/* Renders a floating action button or a button at the bottom */}\n      <TriggerButton />\n    </View>\n  );\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"With this single-time setup, your non-technical teams are now empowered to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:['Launch a "Welcome" popup on the ',(0,i.jsx)(n.code,{children:"home"})," screen."]}),"\n",(0,i.jsx)(n.li,{children:"A/B test different promotional banners."}),"\n",(0,i.jsx)(n.li,{children:'Add a "Feedback" button that opens a survey flow.\n...all without writing any new code.'}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);