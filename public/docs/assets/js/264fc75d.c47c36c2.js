"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[68],{3262:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Flutter/triggering_experiments","title":"How to trigger experiments in Flutter?","description":"Triggering Experiments","source":"@site/docs/Flutter/triggering_experiments.md","sourceDirName":"Flutter","slug":"/Flutter/triggering_experiments","permalink":"/docs/Flutter/triggering_experiments","draft":false,"unlisted":false,"editUrl":"https://github.com/pipeguru/documentation/tree/main/docs/Flutter/triggering_experiments.md","tags":[{"inline":true,"label":"flutter","permalink":"/docs/tags/flutter"},{"inline":true,"label":"experiments","permalink":"/docs/tags/experiments"}],"version":"current","frontMatter":{"title":"How to trigger experiments in Flutter?","tags":["flutter","experiments"]},"sidebar":"tutorialSidebar","previous":{"title":"Flutter Installation Guide","permalink":"/docs/Flutter/installation"},"next":{"title":"Kotlin","permalink":"/docs/category/kotlin"}}');var i=t(4848),a=t(8453);const s={title:"How to trigger experiments in Flutter?",tags:["flutter","experiments"]},o=void 0,l={},c=[{value:"Triggering Experiments",id:"triggering-experiments",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"triggering-experiments",children:"Triggering Experiments"}),"\n",(0,i.jsx)(n.p,{children:"In your Flutter widget, you can trigger an experiment when the widget is initialized:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"import 'package:flutter/material.dart';\nimport 'package:pipeguru_flutter/pipeguru_flutter.dart';\n\nclass MainScreen extends StatefulWidget {\n  @override\n  _MainScreenState createState() => _MainScreenState();\n}\n\nclass _MainScreenState extends State<MainScreen> {\n  @override\n  void initState() {\n    super.initState();\n    // Trigger an experiment when the screen loads\n    PipeGuru.track('user_viewed_main_screen');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      // ...\n    );\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can also trigger an experiment based on a user action, like a button press:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"import 'package:flutter/material.dart';\nimport 'package:pipeguru_flutter/pipeguru_flutter.dart';\n\nclass PricingScreen extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: ElevatedButton(\n          onPressed: () {\n            // Example properties for segmentation.\n            // 'braze_segments' is shown here as an example of passing custom data structures.\n            final brazeSegments = ['segment1', 'segment2'];\n\n            // This event can now be used to trigger an experiment from the PipeGuru dashboard\n            PipeGuru.track('user_viewed_pricing_page', properties: {\n                'plan': 'premium',\n                'user_level': 'power_user',\n                'gender': 'female',\n                'city': 'Berlin',\n                'country': 'Germany',\n                'braze_segments': brazeSegments\n            });\n          },\n          child: Text('Subscribe'),\n        ),\n      ),\n    );\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To show an experiment directly, you can use the ",(0,i.jsx)(n.code,{children:"showExperiment"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"import 'package:flutter/material.dart';\nimport 'package:pipeguru_flutter/pipeguru_flutter.dart';\n\nclass MainScreen extends StatefulWidget {\n  @override\n  _MainScreenState createState() => _MainScreenState();\n}\n\nclass _MainScreenState extends State<MainScreen> {\n  @override\n  void initState() {\n    super.initState();\n\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      final brazeSegments = ['segment1', 'segment2'];\n\n      // Directly show an experiment. This method requires a BuildContext\n      // to present the experiment UI (e.g., as a new screen or dialog).\n      PipeGuru.showExperiment('new_user_onboarding', context: context, properties: {\n          'plan': 'premium',\n          'user_level': 'power_user',\n          'gender': 'female',\n          'city': 'Berlin',\n          'country': 'Germany',\n          'braze_segments': brazeSegments\n      });\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      // ...\n    );\n  }\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);