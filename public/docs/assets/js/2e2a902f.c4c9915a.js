"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[836],{6713:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Swift/triggering_experiments","title":"Triggering Experiments in Swift","description":"Triggering Experiments","source":"@site/docs/Swift/triggering_experiments.md","sourceDirName":"Swift","slug":"/Swift/triggering_experiments","permalink":"/docs/Swift/triggering_experiments","draft":false,"unlisted":false,"editUrl":"https://github.com/pipeguru/documentation/tree/main/docs/Swift/triggering_experiments.md","tags":[{"inline":true,"label":"swift","permalink":"/docs/tags/swift"},{"inline":true,"label":"experiments","permalink":"/docs/tags/experiments"}],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Triggering Experiments in Swift","tags":["swift","experiments"],"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Swift Installation Guide","permalink":"/docs/Swift/installation"},"next":{"title":"Consuming SDK Events","permalink":"/docs/Swift/consuming_events"}}');var r=i(4848),s=i(8453);const a={title:"Triggering Experiments in Swift",tags:["swift","experiments"],sidebar_position:2},o=void 0,d={},l=[{value:"Triggering Experiments",id:"triggering-experiments",level:2},{value:"Displaying a Card View",id:"displaying-a-card-view",level:3},{value:"Presenting a Sheet",id:"presenting-a-sheet",level:3}];function c(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"triggering-experiments",children:"Triggering Experiments"}),"\n",(0,r.jsx)(n.p,{children:"The PipeGuru Swift SDK offers several ways to trigger experiments, designed to fit naturally into modern SwiftUI applications. You can display UI components like image cards and sheets directly, or trigger an experiment programmatically to get its data."}),"\n",(0,r.jsx)(n.h3,{id:"displaying-a-card-view",children:"Displaying a Card View"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"PipeGuruCardView"})," is a SwiftUI ",(0,r.jsx)(n.code,{children:"View"})," that automatically triggers an experiment and displays its content. It's ideal for embedding promotional content or features directly within your app's UI."]}),"\n",(0,r.jsxs)(n.p,{children:["The view handles its own loading and presentation logic. It expects the experiment payload to contain an ",(0,r.jsx)(n.code,{children:"imageUrl"})," for the card's background and a ",(0,r.jsx)(n.code,{children:"webviewUrl"})," (PipeGuruSheet or Deeplink) to open when the card is tapped. Both of these can be configured remotely in the pipeguru dashboard."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-swift",children:'import SwiftUI\nimport PipeGuru\n\nstruct PersonalizedContentView: View {\n    let brazeSegments: [String] = ["segment1", "segment2"]\n\n    var body: some View {\n        ScrollView {\n            VStack(alignment: .leading, spacing: 20) {\n                // This view will trigger the experiment and display the resulting card.\n                // We pass attributes for server-side targeting.\n                // PipeGuruCardView is an `AsyncImage` and accepts its view modifiers\n                PipeGuruCardView(\n                    experimentId: "main_content_card", attributes: [\n                        "plan": "premium",\n                        "user_level": "power_user",\n                        "gender": "female",\n                        "city": "Berlin",\n                        "country": "Germany",\n                        "braze_segments": brazeSegments\n                    ]\n                )\n            }\n            .padding()\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"presenting-a-sheet",children:"Presenting a Sheet"}),"\n",(0,r.jsxs)(n.p,{children:["To present an experiment in a modal sheet or full-screen cover (e.g., for an onboarding flow), use the ",(0,r.jsx)(n.code,{children:"PipeGuruSheet"})," view modifier. It binds to a boolean state variable to control its presentation."]}),"\n",(0,r.jsxs)(n.p,{children:["This modifier expects the experiment payload to contain a ",(0,r.jsx)(n.code,{children:"webviewUrl"})," which can be configured remotely in the pipeguru dashboard."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-swift",children:'import SwiftUI\nimport PipeGuru\n\nstruct ContentView: View {\n    @State private var showOnboarding = false\n\n    var body: some View {\n        VStack {\n            Button("Start Onboarding") {\n                showOnboarding = true\n            }\n        }\n        // The sheet is triggered when `showOnboarding` becomes true.\n        PipeGuruSheet(\n            "newUserOnboarding",\n            isPresented: $showOnboarding,\n            style: .fullScreen, // or .sheet\n            attributes: [\n                "plan": "premium",\n                "user_level": "power_user",\n                "gender": "female",\n                "city": "Berlin",\n                "country": "Germany",\n                "braze_segments": brazeSegments\n            ]\n        )\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"These views also fire events throughout their lifecycle. The next section covers how to consume these events for analytics or to trigger custom in-app behavior."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);